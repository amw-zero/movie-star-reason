// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var TestLib = require("./TestLib.bs.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var MovieStarReason = require("./MovieStarReason.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function asyncViewingMovies(param) {
  var states = {
    contents: /* [] */0
  };
  var observer = function (s) {
    states.contents = /* :: */[
      s,
      states.contents
    ];
    return /* () */0;
  };
  var server = function (f) {
    return Curry._1(f, /* array */[{
                  title: "Test Movie"
                }]);
  };
  MovieStarReason.Command.asyncTopMovies(MovieStarReason.defaultState, server, observer);
  var match = states.contents;
  if (match) {
    var match$1 = match[1];
    if (match$1 && !match$1[1]) {
      var intermediateStateCheck = match$1[0].isLoadingMovies === true;
      var finalStateCheck = Caml_array.caml_array_get(match[0].movies, 0).title === "Test Movie";
      if (intermediateStateCheck) {
        if (finalStateCheck) {
          return /* Pass */0;
        } else {
          return /* Fail */["Final state failed"];
        }
      } else if (finalStateCheck) {
        return /* Fail */["Intermediate state failed"];
      } else {
        return /* Fail */["Everything is broken"];
      }
    }
    
  }
  throw [
        Caml_builtin_exceptions.match_failure,
        /* tuple */[
          "Test.re",
          14,
          6
        ]
      ];
}

function testViewingMovies(param) {
  var match = MovieStarReason.Command.viewTopMovies(MovieStarReason.defaultState);
  return TestLib.expect("Wayne's World", Caml_array.caml_array_get(match.state.movies, 0).title);
}

function testFavoritingMovies(param) {
  var title = "Movie 1";
  var state_movies = /* array */[{
      title: title
    }];
  var state_isLoadingMovies = MovieStarReason.defaultState.isLoadingMovies;
  var state_favoritedMovies = MovieStarReason.defaultState.favoritedMovies;
  var state = {
    movies: state_movies,
    isLoadingMovies: state_isLoadingMovies,
    favoritedMovies: state_favoritedMovies
  };
  var state$1 = MovieStarReason.Command.toggleFavoriteMovie(Caml_array.caml_array_get(state_movies, 0), state);
  return TestLib.expect(List.hd(state$1.favoritedMovies).title, title);
}

function testClearingFavoriteMovies(param) {
  var state_movies = MovieStarReason.defaultState.movies;
  var state_isLoadingMovies = MovieStarReason.defaultState.isLoadingMovies;
  var state_favoritedMovies = /* :: */[
    {
      title: "Favorite"
    },
    /* [] */0
  ];
  var state = {
    movies: state_movies,
    isLoadingMovies: state_isLoadingMovies,
    favoritedMovies: state_favoritedMovies
  };
  var state$1 = MovieStarReason.Command.clearFavoriteMovies(state);
  return TestLib.expect(String(List.length(state$1.favoritedMovies)), "0");
}

var tests_000 = {
  test: testViewingMovies,
  description: "Viewing Movies"
};

var tests_001 = /* :: */[
  {
    test: testFavoritingMovies,
    description: "Favoriting Movies"
  },
  /* :: */[
    {
      test: testClearingFavoriteMovies,
      description: "Clearing Favorite Movies"
    },
    /* :: */[
      {
        test: asyncViewingMovies,
        description: "Async fetching movies"
      },
      /* [] */0
    ]
  ]
];

var tests = /* :: */[
  tests_000,
  tests_001
];

TestLib.runTests(tests);

exports.asyncViewingMovies = asyncViewingMovies;
exports.testViewingMovies = testViewingMovies;
exports.testFavoritingMovies = testFavoritingMovies;
exports.testClearingFavoriteMovies = testClearingFavoriteMovies;
exports.tests = tests;
/*  Not a pure module */
