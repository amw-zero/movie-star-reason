// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var $$String = require("bs-platform/lib/js/string.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var MovieStarReason = require("./MovieStarReason.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function expect(expected, actual) {
  var match = expected === actual;
  if (match) {
    return /* Pass */0;
  } else {
    return /* Fail */["Expected: " + (expected + (" | Received: " + actual))];
  }
}

function testViewingMovies(param) {
  var state_movies = /* array */[];
  var state = {
    movies: state_movies,
    favoritedMovies: /* [] */0
  };
  var state$1 = MovieStarReason.Command.viewTopMovies(state);
  return expect("Wayne's World", Caml_array.caml_array_get(state$1.movies, 0).title);
}

function testFavoritingMovies(param) {
  var title = "Movie 1";
  var state_movies = /* array */[{
      title: title
    }];
  var state = {
    movies: state_movies,
    favoritedMovies: /* [] */0
  };
  var state$1 = MovieStarReason.Command.toggleFavoriteMovie(Caml_array.caml_array_get(state_movies, 0), state);
  return expect(List.hd(state$1.favoritedMovies).title, title);
}

var tests_000 = {
  test: testViewingMovies,
  description: "Viewing Movies"
};

var tests_001 = /* :: */[
  {
    test: testFavoritingMovies,
    description: "Favoriting Movies"
  },
  /* [] */0
];

var tests = /* :: */[
  tests_000,
  tests_001
];

var failingTests = List.map((function (failedTest) {
        var match = failedTest.testResult;
        var reason;
        if (match) {
          reason = match[0];
        } else {
          throw [
                Caml_builtin_exceptions.match_failure,
                /* tuple */[
                  "Test.re",
                  69,
                  9
                ]
              ];
        }
        return {
                reason: reason,
                description: failedTest.description
              };
      }), List.filter((function (testCaseResult) {
              var match = testCaseResult.testResult;
              if (match) {
                return true;
              } else {
                return false;
              }
            }))(List.map((function (testCase) {
                return {
                        testResult: Curry._1(testCase.test, /* () */0),
                        description: testCase.description
                      };
              }), tests)));

function failedTestMessage(failedTestCase) {
  return failedTestCase.description + (" FAILED | " + failedTestCase.reason);
}

var messages = List.map(failedTestMessage, failingTests);

var match = List.length(messages);

if (match !== 0) {
  console.log($$String.concat("\n", messages));
} else {
  console.log("All tests passed.");
}

exports.expect = expect;
exports.testViewingMovies = testViewingMovies;
exports.testFavoritingMovies = testFavoritingMovies;
exports.tests = tests;
exports.failingTests = failingTests;
exports.failedTestMessage = failedTestMessage;
exports.messages = messages;
/* failingTests Not a pure module */
